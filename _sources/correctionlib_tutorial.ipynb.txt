{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7fbe00e3",
   "metadata": {},
   "source": [
    "# Correctionlib tutorial\n",
    "\n",
    "The purpose of this library is to provide a well-structured JSON data format for a\n",
    "wide variety of ad-hoc correction factors encountered in a typical HEP analysis and\n",
    "a companion evaluation tool suitable for use in C++ and python programs.\n",
    "Here we restrict our definition of correction factors to a class of functions with\n",
    "scalar inputs that produce a scalar output.\n",
    "\n",
    "In python, the function signature is:\n",
    "\n",
    "```python\n",
    "def f(*args: int | float | str) -> float: ...\n",
    "```\n",
    "\n",
    "In C++, the signature is:\n",
    "```cpp\n",
    "double Correction::evaluate(const std::vector<std::variant<int, double, std::string>>& values) const;\n",
    "```\n",
    "\n",
    "The supported function classes include:\n",
    "\n",
    "  * multi-dimensional binned lookups;\n",
    "  * binned lookups pointing to multi-argument formulas with a restricted\n",
    "    math function set (`exp`, `sqrt`, etc.);\n",
    "  * categorical (string or integer enumeration) maps;\n",
    "  * input transforms (updating one input value in place);\n",
    "  * pseudorandom number generation; and\n",
    "  * compositions of the above.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cf107e9",
   "metadata": {},
   "source": [
    "## Basic evaluator usage\n",
    "We can import a previously defined set of correction objects using the\n",
    "```python\n",
    "correctionlib.CorrectionSet.from_file(filename)\n",
    "```\n",
    "or from a string with `.from_string(\"...\")`. The `from_file` invocation accepts JSON or gzipped JSON data.\n",
    "The `CorrectionSet` acts as a dictionary of `Correction` objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ecf89960",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['gen2_to_gen1', 'phimod', 'ptweight']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import correctionlib\n",
    "\n",
    "ceval = correctionlib.CorrectionSet.from_file(\"mycorrections.json\")\n",
    "list(ceval.keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5e178c6",
   "metadata": {},
   "source": [
    "Each correction has a name, description, version, and a input and output specification:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "12ec8a54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correction gen2_to_gen1 has 2 inputs\n",
      "   Input pt (real): pt\n",
      "   Input eta (real): eta\n",
      "Correction phimod has 2 inputs\n",
      "   Input phi (real): \n",
      "   Input q (int): Particle charge\n",
      "Correction ptweight has 2 inputs\n",
      "   Input pt (real): Muon transverse momentum\n",
      "   Input syst (string): Systematic\n"
     ]
    }
   ],
   "source": [
    "for corr in ceval.values():\n",
    "    print(f\"Correction {corr.name} has {len(corr.inputs)} inputs\")\n",
    "    for ix in corr.inputs:\n",
    "        print(f\"   Input {ix.name} ({ix.type}): {ix.description}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a45a4c6",
   "metadata": {},
   "source": [
    "Most important, each correction has a `.evaluate(...)` method that accepts scalars or numpy arrays:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fa574b22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0278771158865732"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ceval[\"phimod\"].evaluate(1.2, -1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c511ff1",
   "metadata": {},
   "source": [
    "Note that the input types are strict (not coerced) to help catch bugs early, e.g."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "da7f5ae9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# will not work\n",
    "# ceval[\"phimod\"].evaluate(1.2, -1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "43daa330",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.1 , 1.02, 1.1 , 1.1 , 1.1 , 1.1 , 1.1 , 1.08, 1.1 , 1.02])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "ptvals = np.random.exponential(15.0, size=10)\n",
    "\n",
    "ceval[\"ptweight\"].evaluate(ptvals, \"nominal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "780c7d72",
   "metadata": {},
   "source": [
    "Currently, only numpy-compatible awkward arrays are accepted, but a jagged array can be flattened and re-wrapped quite easily:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f84938cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Array [[1.1, 1.08, 1.06], ... 1.02], [1.02]] type='3 * var * float64'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import awkward as ak\n",
    "\n",
    "ptjagged = ak.Array([[10.1, 20.2, 30.3], [40.4, 50.5], [60.6]])\n",
    "\n",
    "ptflat, counts = ak.flatten(ptjagged), ak.num(ptjagged)\n",
    "weight = ak.unflatten(\n",
    "    ceval[\"ptweight\"].evaluate(ptflat, \"nominal\"),\n",
    "    counts=counts,\n",
    ")\n",
    "weight"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8789ade",
   "metadata": {},
   "source": [
    "## Creating new corrections\n",
    "\n",
    "Alongside the evaluator we just demonstrated, `correctionlib` also contains a complete JSON Schema defining the expected fields and types found in a correction json object. The complete schema (version 2) is defined in the [documentation](https://cms-nanoaod.github.io/correctionlib/schemav2.html). In the package, we use [pydantic](https://pydantic-docs.helpmanual.io/) to help us validate the data and build correction objects in an easier way. The basic object is the `Correction` which, besides some metadata like a name and version, defines upfront the inputs and output. Below we make our first correction, which will always return `1.1` as the output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "445e56dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Correction(name='ptweight', description=None, version=1, inputs=[Variable(name='pt', type='real', description='Muon transverse momentum')], output=Variable(name='weight', type='real', description='Multiplicative event weight'), generic_formulas=None, data=1.1)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import correctionlib.schemav2 as cs\n",
    "\n",
    "corr = cs.Correction(\n",
    "    name=\"ptweight\",\n",
    "    version=1,\n",
    "    inputs=[\n",
    "        cs.Variable(name=\"pt\", type=\"real\", description=\"Muon transverse momentum\"),\n",
    "    ],\n",
    "    output=cs.Variable(name=\"weight\", type=\"real\", description=\"Multiplicative event weight\"),\n",
    "    data=1.1,\n",
    ")\n",
    "corr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f07d14a",
   "metadata": {},
   "source": [
    "The resulting object can be manipulated in-place as needed. Note that this correction object is not an evluator instance as we saw before. We can convert from the schema to an evaluator with the `.to_evaluator()` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "70928d03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.to_evaluator().evaluate(12.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99d8e60a",
   "metadata": {},
   "source": [
    "A nicer printout is also available through `rich`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0f4f5fd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">ðŸ“ˆ <span style=\"font-weight: bold\">ptweight</span> <span style=\"font-weight: bold\">(</span>v1<span style=\"font-weight: bold\">)</span>\n",
       "<span style=\"font-style: italic\">No description</span>\n",
       "Node counts: \n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">pt</span> (real)                  â”‚\n",
       "â”‚ Muon transverse momentum   â”‚\n",
       "â”‚ Range: <span style=\"color: #800000; text-decoration-color: #800000; font-weight: bold\">unused</span>, overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">weight</span> (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "</pre>\n"
      ],
      "text/plain": [
       "ðŸ“ˆ \u001b[1mptweight\u001b[0m \u001b[1m(\u001b[0mv1\u001b[1m)\u001b[0m\n",
       "\u001b[3mNo description\u001b[0m\n",
       "Node counts: \n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mpt\u001b[0m (real)                  â”‚\n",
       "â”‚ Muon transverse momentum   â”‚\n",
       "â”‚ Range: \u001b[1;31munused\u001b[0m, overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mweight\u001b[0m (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import rich\n",
    "\n",
    "rich.print(corr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "237a7a12",
   "metadata": {},
   "source": [
    "The `data=` field of the correction is the root node of a tree of objects defining how the correction is to be evaluated. In the first example, it simply terminates at this node, returning always the float value `1.1`. We have many possible node types:\n",
    "\n",
    "- Binning: for 1D binned variable, each bin can be any type;\n",
    "- MultiBinning: an optimization for nested 1D Binnings, this can lookup n-dimensional binned values;\n",
    "- Category: for discrete dimensions, either integer or string types;\n",
    "- Formula: arbitrary formulas in up to four (real or integer-valued) input variables;\n",
    "- FormulaRef: an optimization for repeated use of the same formula with different coefficients;\n",
    "- Transform: useful to rewrite an input for all downstream nodes;\n",
    "- HashPRNG: a deterministic pseudorandom number generator; and\n",
    "- float: a constant value\n",
    "\n",
    "Let's create our first binned correction. We'll have to decide how to handle inputs that are out of range with the `flow=` attribute. Try switching `\"clamp\"` with `\"error\"` or another content node."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "682bb99a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">ðŸ“ˆ <span style=\"font-weight: bold\">ptweight</span> <span style=\"font-weight: bold\">(</span>v1<span style=\"font-weight: bold\">)</span>\n",
       "<span style=\"font-style: italic\">No description</span>\n",
       "Node counts: <span style=\"font-weight: bold\">Binning</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">pt</span> (real)                         â”‚\n",
       "â”‚ Muon transverse momentum          â”‚\n",
       "â”‚ Range: [10.0, 120.0), overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">weight</span> (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "</pre>\n"
      ],
      "text/plain": [
       "ðŸ“ˆ \u001b[1mptweight\u001b[0m \u001b[1m(\u001b[0mv1\u001b[1m)\u001b[0m\n",
       "\u001b[3mNo description\u001b[0m\n",
       "Node counts: \u001b[1mBinning\u001b[0m: \u001b[1;36m1\u001b[0m\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mpt\u001b[0m (real)                         â”‚\n",
       "â”‚ Muon transverse momentum          â”‚\n",
       "â”‚ Range: [10.0, 120.0), overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mweight\u001b[0m (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ptweight = cs.Correction(\n",
    "    name=\"ptweight\",\n",
    "    version=1,\n",
    "    inputs=[cs.Variable(name=\"pt\", type=\"real\", description=\"Muon transverse momentum\")],\n",
    "    output=cs.Variable(name=\"weight\", type=\"real\", description=\"Multiplicative event weight\"),\n",
    "    data=cs.Binning(\n",
    "        nodetype=\"binning\",\n",
    "        input=\"pt\",\n",
    "        edges=[10, 20, 30, 40, 50, 80, 120],\n",
    "        content=[1.1, 1.08, 1.06, 1.04, 1.02, 1.0],\n",
    "        flow=\"clamp\",\n",
    "    ),\n",
    ")\n",
    "\n",
    "rich.print(ptweight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1cc178ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ptweight.to_evaluator().evaluate(230.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "736f8216",
   "metadata": {},
   "source": [
    "## Formulas\n",
    "\n",
    "Formula support currently includes a mostly-complete subset of the ROOT library TFormula class, and is implemented in a threadsafe standalone manner. The parsing grammar is formally defined and parsed through the use of a header-only PEG parser library. This allows for extremely fast parsing of thousands of formulas encountered sometimes in binned formula (spline) correction types. Below we demonstrate a simple formula for a made-up $\\phi$-dependent efficiency correction. This also demonstrates nesting a content node inside another for the first time, with the outer Category node defining which formula to use depending on the particle charge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e86a74de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">ðŸ“ˆ <span style=\"font-weight: bold\">phimod</span> <span style=\"font-weight: bold\">(</span>v1<span style=\"font-weight: bold\">)</span>\n",
       "Phi-dependent tracking efficiency, or something?\n",
       "Node counts: <span style=\"font-weight: bold\">Category</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"font-weight: bold\">Formula</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">phi</span> (real)                      â”‚ â”‚ <span style=\"font-weight: bold\">q</span> (int)         â”‚\n",
       "â”‚ <span style=\"font-style: italic\">No description</span>                  â”‚ â”‚ Particle charge â”‚\n",
       "â”‚ Range: [-inf, inf), overflow ok â”‚ â”‚ Values: -1, 1   â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">weight</span> (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "</pre>\n"
      ],
      "text/plain": [
       "ðŸ“ˆ \u001b[1mphimod\u001b[0m \u001b[1m(\u001b[0mv1\u001b[1m)\u001b[0m\n",
       "Phi-dependent tracking efficiency, or something?\n",
       "Node counts: \u001b[1mCategory\u001b[0m: \u001b[1;36m1\u001b[0m, \u001b[1mFormula\u001b[0m: \u001b[1;36m2\u001b[0m\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mphi\u001b[0m (real)                      â”‚ â”‚ \u001b[1mq\u001b[0m (int)         â”‚\n",
       "â”‚ \u001b[3mNo description\u001b[0m                  â”‚ â”‚ Particle charge â”‚\n",
       "â”‚ Range: [-inf, inf), overflow ok â”‚ â”‚ Values: -1, 1   â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mweight\u001b[0m (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "phimod = cs.Correction(\n",
    "    name=\"phimod\",\n",
    "    description=\"Phi-dependent tracking efficiency, or something?\",\n",
    "    version=1,\n",
    "    inputs=[\n",
    "        cs.Variable(name=\"phi\", type=\"real\"),\n",
    "        cs.Variable(name=\"q\", type=\"int\", description=\"Particle charge\"),\n",
    "    ],\n",
    "    output=cs.Variable(name=\"weight\", type=\"real\", description=\"Multiplicative event weight\"),\n",
    "    data=cs.Category(\n",
    "        nodetype=\"category\",\n",
    "        input=\"q\",\n",
    "        content=[\n",
    "            cs.CategoryItem(\n",
    "                key=1,\n",
    "                value=cs.Formula(\n",
    "                    nodetype=\"formula\",\n",
    "                    variables=[\"phi\"],\n",
    "                    parser=\"TFormula\",\n",
    "                    expression=\"(1+0.1*sin(x+0.3))/(1+0.07*sin(x+0.4))\",\n",
    "                ),\n",
    "            ),\n",
    "            cs.CategoryItem(\n",
    "                key=-1,\n",
    "                value=cs.Formula(\n",
    "                    nodetype=\"formula\",\n",
    "                    variables=[\"phi\"],\n",
    "                    parser=\"TFormula\",\n",
    "                    expression=\"(1+0.1*sin(x+0.31))/(1+0.07*sin(x+0.39))\",\n",
    "                ),\n",
    "            ),\n",
    "        ]\n",
    "    ),\n",
    ")\n",
    "rich.print(phimod)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9c8d375c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0280774577481218"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phimod.to_evaluator().evaluate(1.23, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aff9b1ef",
   "metadata": {},
   "source": [
    "Try evaluating the correction for a neutral particle (`charge=0`) What can we change to the above definition to allow it to return a reasonable value for neutral particles rather than an error?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "398610dc",
   "metadata": {},
   "source": [
    "## Converting from histograms\n",
    "\n",
    "Often one wants to convert a histogram into a correction object. Here we show how to do that using histgrams made with the [hist](https://hist.readthedocs.io/en/latest/) package, but any histogram that respects the [Unified Histogram Interface Plottable](https://uhi.readthedocs.io/en/latest/plotting.html#plotting) protocol (including, for example, ROOT TH1s) should work as well.\n",
    "\n",
    "Note: some of the conversion utilities require extra packages installed. The simplest way to ensure you have all dependencies is via the `pip install correctionlib[convert]` extras configuration.\n",
    "\n",
    "Here we create some mock data for two slightly different pt and eta spectra (say, from two different generators) and derive a correction to reweight one sample to the other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8f8ad2ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1214b6380>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import hist\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "dists = (\n",
    "    hist.Hist.new\n",
    "    .StrCat([\"gen1\", \"gen2\"], name=\"dataset\", growth=True)\n",
    "    .Reg(20, 0, 100, name=\"pt\")\n",
    "    .Reg(4, -3, 3, name=\"eta\")\n",
    "    .Weight()\n",
    "    .fill(\n",
    "        dataset=\"gen1\",\n",
    "        pt=np.random.exponential(scale=10.0, size=10000) + np.random.exponential(scale=10.0, size=10000),\n",
    "        eta=np.random.normal(scale=1, size=10000)\n",
    "    )\n",
    "    .fill(\n",
    "        dataset=\"gen2\",\n",
    "        pt=np.random.exponential(scale=10.0, size=10000) + np.random.exponential(scale=15.0, size=10000),\n",
    "        eta=np.random.normal(scale=1.1, size=10000)\n",
    "    )\n",
    ")\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "dists[:, :, sum].plot1d(ax=ax)\n",
    "ax.legend(title=\"dataset\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9adbde5",
   "metadata": {},
   "source": [
    "Now we derive a correction as a function of $p_T$ and $\\eta$ to `gen2` such that it agrees with `gen1`. Weâ€™ll set it to 1 anywhere we run out of statistics for the correction, to avoid divide by zero issues."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b07843ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ColormeshArtists(pcolormesh=<matplotlib.collections.QuadMesh object at 0x130968490>, cbar=<matplotlib.colorbar.Colorbar object at 0x130969810>, text=[])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num = dists[\"gen1\", :, :].values()\n",
    "den = dists[\"gen2\", :, :].values()\n",
    "sf = np.where(\n",
    "    (num > 0) & (den > 0),\n",
    "    num / np.maximum(den, 1) * den.sum() / num.sum(),\n",
    "    1.0,\n",
    ")\n",
    "\n",
    "# a quick way to plot the scale factor is to steal the axis definitions from the input histograms:\n",
    "sfhist = hist.Hist(*dists.axes[1:], data=sf)\n",
    "sfhist.plot2d()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc40af2c",
   "metadata": {},
   "source": [
    "Now we use `correctionlib.convert.from_histogram(...)` to convert the scale factor into a correction object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d54dc24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">ðŸ“ˆ <span style=\"font-weight: bold\">gen2_to_gen1</span> <span style=\"font-weight: bold\">(</span>v0<span style=\"font-weight: bold\">)</span>\n",
       "Reweights gen2 to agree with gen1\n",
       "Node counts: <span style=\"font-weight: bold\">MultiBinning</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">pt</span> (real)                        â”‚ â”‚ <span style=\"font-weight: bold\">eta</span> (real)                      â”‚\n",
       "â”‚ pt                               â”‚ â”‚ eta                             â”‚\n",
       "â”‚ Range: [0.0, 100.0), overflow ok â”‚ â”‚ Range: [-3.0, 3.0), overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€ â—€ output â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">out</span> (real)     â”‚\n",
       "â”‚ <span style=\"font-style: italic\">No description</span> â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "</pre>\n"
      ],
      "text/plain": [
       "ðŸ“ˆ \u001b[1mgen2_to_gen1\u001b[0m \u001b[1m(\u001b[0mv0\u001b[1m)\u001b[0m\n",
       "Reweights gen2 to agree with gen1\n",
       "Node counts: \u001b[1mMultiBinning\u001b[0m: \u001b[1;36m1\u001b[0m\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mpt\u001b[0m (real)                        â”‚ â”‚ \u001b[1meta\u001b[0m (real)                      â”‚\n",
       "â”‚ pt                               â”‚ â”‚ eta                             â”‚\n",
       "â”‚ Range: [0.0, 100.0), overflow ok â”‚ â”‚ Range: [-3.0, 3.0), overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€ â—€ output â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mout\u001b[0m (real)     â”‚\n",
       "â”‚ \u001b[3mNo description\u001b[0m â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import correctionlib.convert\n",
    "\n",
    "# without a name, the resulting object will fail validation\n",
    "sfhist.name = \"gen2_to_gen1\"\n",
    "sfhist.label = \"out\"\n",
    "gen2_to_gen1 = correctionlib.convert.from_histogram(sfhist)\n",
    "gen2_to_gen1.description = \"Reweights gen2 to agree with gen1\"\n",
    "# set overflow bins behavior (default is to raise an error when out of bounds)\n",
    "gen2_to_gen1.data.flow = \"clamp\"\n",
    "rich.print(gen2_to_gen1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8437d322",
   "metadata": {},
   "source": [
    "Now we generate some new mock data as if it was drawn from `gen2` and reweight it with our correction. Let's see if our correction closes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bc2bbfc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1308b88b0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ptvals = np.random.exponential(scale=10.0, size=10000) + np.random.exponential(scale=15.0, size=10000)\n",
    "etavals = np.random.normal(scale=1.1, size=10000)\n",
    "\n",
    "dists.fill(\n",
    "    dataset=\"gen2rwt\",\n",
    "    pt=ptvals,\n",
    "    eta=etavals,\n",
    "    weight=gen2_to_gen1.to_evaluator().evaluate(ptvals, etavals)\n",
    ")\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "dists[:, :, sum].plot1d(ax=ax)\n",
    "ax.legend(title=\"dataset\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d8b6a03",
   "metadata": {},
   "source": [
    "## Polynomial fits\n",
    "\n",
    "It is apparent from the plot of the 2D correction factor that we do not have sufficient sample statistics to derive a smooth correction. One approach to improve the quality is to fit it to a polynomial. A utility method, `correctionlib.convert.ndpolyfit` allows to fit an arbitrary-dimensional polynomial to a set of data points and return a correction object representing the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "646de98e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">ðŸ“ˆ <span style=\"font-weight: bold\">gen2_to_gen1_poly</span> <span style=\"font-weight: bold\">(</span>v1<span style=\"font-weight: bold\">)</span>\n",
       "Fit to polynomial of order <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>,<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>\n",
       "Fit status: The unconstrained solution is optimal.\n",
       "chi2 = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5.305322148600006</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-weight: bold\">P</span><span style=\"font-weight: bold\">(</span><span style=\"color: #808000; text-decoration-color: #808000\">dof</span>=<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">71</span><span style=\"font-weight: bold\">)</span> = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.000</span>\n",
       "Node counts: <span style=\"font-weight: bold\">Formula</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">pt</span> (real)                       â”‚ â”‚ <span style=\"font-weight: bold\">eta</span> (real)                      â”‚\n",
       "â”‚ <span style=\"font-style: italic\">No description</span>                  â”‚ â”‚ <span style=\"font-style: italic\">No description</span>                  â”‚\n",
       "â”‚ Range: [-inf, inf), overflow ok â”‚ â”‚ Range: [-inf, inf), overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€ â—€ output â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">output</span> (real)  â”‚\n",
       "â”‚ <span style=\"font-style: italic\">No description</span> â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "</pre>\n"
      ],
      "text/plain": [
       "ðŸ“ˆ \u001b[1mgen2_to_gen1_poly\u001b[0m \u001b[1m(\u001b[0mv1\u001b[1m)\u001b[0m\n",
       "Fit to polynomial of order \u001b[1;36m2\u001b[0m,\u001b[1;36m2\u001b[0m\n",
       "Fit status: The unconstrained solution is optimal.\n",
       "chi2 = \u001b[1;36m5.305322148600006\u001b[0m, \u001b[1;35mP\u001b[0m\u001b[1m(\u001b[0m\u001b[33mdof\u001b[0m=\u001b[1;36m71\u001b[0m\u001b[1m)\u001b[0m = \u001b[1;36m1.000\u001b[0m\n",
       "Node counts: \u001b[1mFormula\u001b[0m: \u001b[1;36m1\u001b[0m\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mpt\u001b[0m (real)                       â”‚ â”‚ \u001b[1meta\u001b[0m (real)                      â”‚\n",
       "â”‚ \u001b[3mNo description\u001b[0m                  â”‚ â”‚ \u001b[3mNo description\u001b[0m                  â”‚\n",
       "â”‚ Range: [-inf, inf), overflow ok â”‚ â”‚ Range: [-inf, inf), overflow ok â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€ â—€ output â”€â”€â”€â•®\n",
       "â”‚ \u001b[1moutput\u001b[0m (real)  â”‚\n",
       "â”‚ \u001b[3mNo description\u001b[0m â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "centers = np.meshgrid(*[ax.centers for ax in sfhist.axes], indexing=\"ij\")\n",
    "\n",
    "gen2_to_gen1_poly, fit = correctionlib.convert.ndpolyfit(\n",
    "    points=[c.flatten() for c in centers],\n",
    "    values=sfhist.values().flatten(),\n",
    "    weights=1/sfhist.variances().flatten(),\n",
    "    varnames=[ax.name for ax in sfhist.axes],\n",
    "    degree=(2, 2),\n",
    ")\n",
    "gen2_to_gen1_poly.name = \"gen2_to_gen1_poly\"\n",
    "rich.print(gen2_to_gen1_poly)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c84435af",
   "metadata": {},
   "source": [
    "Let's check the closure of this method to the previous one:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b9fbd038",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x130a1ad10>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dists.fill(\n",
    "    dataset=\"gen2rwt_poly\",\n",
    "    pt=ptvals,\n",
    "    eta=etavals,\n",
    "    weight=gen2_to_gen1_poly.to_evaluator().evaluate(ptvals, etavals)\n",
    ")\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "dists[:, :, sum].plot1d(ax=ax)\n",
    "ax.legend(title=\"dataset\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aae69ba",
   "metadata": {},
   "source": [
    "Another important consideration is that evaluating a polynomial in Horner form is $O(k)$ where $k$ is the order of the polynomial, while looking up a value in a non-uniform binning is $O(log(n))$ in $n$ bins. Depending on the situation, an acceptable $k$ may be lower than $log(n)$. In our case, the $(2,2)$ polynomial we derived evaluates slower than the binning, partially because it is not evaluated in Horner form:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "01ae867c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "404 Âµs Â± 3.54 Âµs per loop (mean Â± std. dev. of 7 runs, 1,000 loops each)\n",
      "3.28 ms Â± 59.2 Âµs per loop (mean Â± std. dev. of 7 runs, 100 loops each)\n"
     ]
    }
   ],
   "source": [
    "corr_bin = gen2_to_gen1.to_evaluator()\n",
    "corr_pol = gen2_to_gen1_poly.to_evaluator()\n",
    "\n",
    "%timeit corr_bin.evaluate(ptvals, etavals)\n",
    "%timeit corr_pol.evaluate(ptvals, etavals)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08564fd8",
   "metadata": {},
   "source": [
    "However, in an alternative situation, the same may not hold:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "752bdad2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "199 Âµs Â± 4.31 Âµs per loop (mean Â± std. dev. of 7 runs, 1,000 loops each)\n",
      "36.6 Âµs Â± 1.65 Âµs per loop (mean Â± std. dev. of 7 runs, 10,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit np.searchsorted([0.,  5., 10., 15., 20., 25., 30., 35.], ptvals)\n",
    "%timeit np.polyval([0.01, 0.1, 1.0], ptvals)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18cfc2ed",
   "metadata": {},
   "source": [
    "## Resolution models\n",
    "\n",
    "In some instances, one might want to smear the value of a variable, e.g. jet energy, to simulate a degradation of resolution with respect to what was expected from simulation. If we can deterministically generate pseudorandom numbers, we can then use them after suitable scaling to correct the jet momentum. To do so in correctionlib, we gather entropy sources such as the kinematics of the jet and event-level quantities, hash them together using the extremely fast [xxhash](https://cyan4973.github.io/xxHash/) algorithm to generate an integer seed, and use that to initialize a [PCG64](https://www.pcg-random.org/) random number generator, which can then be drawn from to build a normal-distributed (or otherwise) value. See [issue #130](https://github.com/cms-nanoAOD/correctionlib/issues/130) for further details."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0375e2f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "resrng = cs.Correction(\n",
    "    name=\"resrng\",\n",
    "    description=\"Deterministic smearing value generator\",\n",
    "    version=1,\n",
    "    inputs=[\n",
    "        cs.Variable(name=\"pt\", type=\"real\", description=\"Unsmeared jet pt\"),\n",
    "        cs.Variable(name=\"eta\", type=\"real\", description=\"Jet pseudorapdity\"),\n",
    "        cs.Variable(name=\"phi\", type=\"real\", description=\"Jet phi (entropy source)\"),\n",
    "        cs.Variable(name=\"evt\", type=\"int\", description=\"Event number (entropy source)\"),\n",
    "    ],\n",
    "    output=cs.Variable(name=\"rng\", type=\"real\"),\n",
    "    data=cs.HashPRNG(\n",
    "        nodetype=\"hashprng\",\n",
    "        inputs=[\"pt\", \"eta\", \"phi\", \"evt\"],\n",
    "        distribution=\"stdnormal\",\n",
    "    )\n",
    ")\n",
    "\n",
    "resmodel = cs.Correction(\n",
    "    name=\"resmodel\",\n",
    "    description=\"A jet energy resolution smearing model\",\n",
    "    version=1,\n",
    "    inputs=[\n",
    "        cs.Variable(name=\"pt\", type=\"real\", description=\"Unsmeared jet pt\"),\n",
    "    ],\n",
    "    output=cs.Variable(name=\"scale\", type=\"real\"),\n",
    "    data=cs.Binning(\n",
    "        nodetype=\"binning\",\n",
    "        input=\"pt\",\n",
    "        edges=[10, 20, 30, 40, 50, 80, 120],\n",
    "        content=[0.3, 0.25, 0.20, 0.14, 0.06, 0.02],\n",
    "        flow=\"clamp\",\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f93ca4d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Smeared $p_T$ - Unsmeared $p_T$')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# dummy distributions\n",
    "phivals = np.random.uniform(-np.pi, np.pi, size=10000)\n",
    "eventnumber = np.random.randint(123456, 123567, size=10000)\n",
    "\n",
    "# apply a pT-dependent smearing by scaling the standard normal draw\n",
    "smear_val = (\n",
    "    resrng.to_evaluator().evaluate(ptvals, etavals, phivals, eventnumber)\n",
    "    * resmodel.to_evaluator().evaluate(ptvals)\n",
    ")\n",
    "pt_smeared = np.maximum(ptvals + smear_val, 0.0)\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.hist(pt_smeared - ptvals, bins=50)\n",
    "ax.set_xlabel(\"Smeared $p_T$ - Unsmeared $p_T$\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ffea3dd",
   "metadata": {},
   "source": [
    "## Chaining with CompoundCorrection\n",
    "\n",
    "A CompoundCorrection allows to apply a sequence of corrections in order, refering to other corrections in the same CorrectionSet object. For example, we can merge the smearing and RNG into one:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8dfe7c7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "One-shot smearing is equivalent to two-step procedure?\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "cset = correctionlib.schemav2.CorrectionSet(\n",
    "    schema_version=2,\n",
    "    corrections=[\n",
    "        resmodel,\n",
    "        resrng,\n",
    "    ],\n",
    "    compound_corrections=[\n",
    "        cs.CompoundCorrection(\n",
    "            name=\"resolution_model\",\n",
    "            inputs=[\n",
    "                cs.Variable(name=\"pt\", type=\"real\", description=\"Unsmeared jet pt\"),\n",
    "                cs.Variable(name=\"eta\", type=\"real\", description=\"Jet pseudorapdity\"),\n",
    "                cs.Variable(name=\"phi\", type=\"real\", description=\"Jet phi (entropy source)\"),\n",
    "                cs.Variable(name=\"evt\", type=\"int\", description=\"Event number (entropy source)\"),\n",
    "            ],\n",
    "            output=cs.Variable(name=\"shift\", type=\"real\", description=\"Additive shift to jet pT\"),\n",
    "            inputs_update=[],\n",
    "            input_op=\"*\",\n",
    "            output_op=\"*\",\n",
    "            stack=[\"resmodel\", \"resrng\"],\n",
    "        )\n",
    "    ]\n",
    ")\n",
    "\n",
    "oneshot = cset.to_evaluator().compound[\"resolution_model\"]\n",
    "\n",
    "print(\"One-shot smearing is equivalent to two-step procedure?\")\n",
    "print(np.allclose(\n",
    "    oneshot.evaluate(ptvals, etavals, phivals, eventnumber),\n",
    "    smear_val,\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2807bad",
   "metadata": {},
   "source": [
    "Note the `inputs_update` and `input_op` fields can be used to update inputs as they go through the stack, which is useful for chained corrections such as jet energy corrections."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b533ebae",
   "metadata": {},
   "source": [
    "## Systematics\n",
    "\n",
    "There are many ways to encode systematic uncertainties within correctionlib, although no nodes are dedicated to the task. See [issue #4](https://github.com/cms-nanoAOD/correctionlib/issues/4) to discuss further the idea of having a dedicated systematic node. The most straightforward option is to use a Category node with string lookup to switch the behavior depending on the active systematic. Below we modify our `ptweight` from before to produce a systematically larger event weight when the `MuonEffUp` systematic is specified, while producing the nominal event weight for any other string key, by taking advantage of the `default=` keywoard in the Category node. We also use the `flow=` keyword in the shifted binning to increase the systematic uncertainty for data with muon $p_T$ larger than 120."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "65c7ee44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">ðŸ“ˆ <span style=\"font-weight: bold\">ptweight</span> <span style=\"font-weight: bold\">(</span>v1<span style=\"font-weight: bold\">)</span>\n",
       "<span style=\"font-style: italic\">No description</span>\n",
       "Node counts: <span style=\"font-weight: bold\">Category</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"font-weight: bold\">Binning</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">pt</span> (real)                        â”‚ â”‚ <span style=\"font-weight: bold\">syst</span> (string)     â”‚\n",
       "â”‚ Muon transverse momentum         â”‚ â”‚ Systematic        â”‚\n",
       "â”‚ Range: [0.0, 120.0), overflow ok â”‚ â”‚ Values: MuonEffUp â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â”‚ <span style=\"color: #008000; text-decoration-color: #008000; font-weight: bold\">has default</span>       â”‚\n",
       "                                     â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ <span style=\"font-weight: bold\">weight</span> (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "</pre>\n"
      ],
      "text/plain": [
       "ðŸ“ˆ \u001b[1mptweight\u001b[0m \u001b[1m(\u001b[0mv1\u001b[1m)\u001b[0m\n",
       "\u001b[3mNo description\u001b[0m\n",
       "Node counts: \u001b[1mCategory\u001b[0m: \u001b[1;36m1\u001b[0m, \u001b[1mBinning\u001b[0m: \u001b[1;36m2\u001b[0m\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•® â•­â”€â”€â”€â”€â”€ â–¶ input â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mpt\u001b[0m (real)                        â”‚ â”‚ \u001b[1msyst\u001b[0m (string)     â”‚\n",
       "â”‚ Muon transverse momentum         â”‚ â”‚ Systematic        â”‚\n",
       "â”‚ Range: [0.0, 120.0), overflow ok â”‚ â”‚ Values: MuonEffUp â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯ â”‚ \u001b[1;32mhas default\u001b[0m       â”‚\n",
       "                                     â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n",
       "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€ â—€ output â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
       "â”‚ \u001b[1mweight\u001b[0m (real)               â”‚\n",
       "â”‚ Multiplicative event weight â”‚\n",
       "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ptweight = cs.Correction(\n",
    "    name=\"ptweight\",\n",
    "    version=1,\n",
    "    inputs=[\n",
    "        cs.Variable(name=\"pt\", type=\"real\", description=\"Muon transverse momentum\"),\n",
    "        cs.Variable(name=\"syst\", type=\"string\", description=\"Systematic\")\n",
    "    ],\n",
    "    output=cs.Variable(name=\"weight\", type=\"real\", description=\"Multiplicative event weight\"),\n",
    "    data=cs.Category(\n",
    "        nodetype=\"category\",\n",
    "        input=\"syst\",\n",
    "        content=[\n",
    "            cs.CategoryItem(\n",
    "                key=\"MuonEffUp\",\n",
    "                value=cs.Binning(\n",
    "                    nodetype=\"binning\",\n",
    "                    input=\"pt\",\n",
    "                    edges=[0, 10, 20, 30, 40, 50, 80, 120],\n",
    "                    content=[1.14, 1.14, 1.09, 1.07, 1.05, 1.03, 1.01],\n",
    "                    flow=1.03,\n",
    "                ),\n",
    "            ),\n",
    "        ],\n",
    "        default=cs.Binning(\n",
    "            nodetype=\"binning\",\n",
    "            input=\"pt\",\n",
    "            edges=[10, 20, 30, 40, 50, 80, 120],\n",
    "            content=[1.1, 1.08, 1.06, 1.04, 1.02, 1.0],\n",
    "            flow=\"clamp\",\n",
    "        ),\n",
    "    ),\n",
    ")\n",
    "\n",
    "rich.print(ptweight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d359ec0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ptweight.to_evaluator().evaluate(135., \"nominal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37ba6ef2",
   "metadata": {},
   "source": [
    "## Writing it all out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "398b8b6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "cset = correctionlib.schemav2.CorrectionSet(\n",
    "    schema_version=2,\n",
    "    description=\"my custom corrections\",\n",
    "    corrections=[\n",
    "        gen2_to_gen1,\n",
    "        ptweight,\n",
    "        phimod,\n",
    "    ],\n",
    ")\n",
    "\n",
    "with open(\"mycorrections.json\", \"w\") as fout:\n",
    "    fout.write(cset.json(exclude_unset=True))\n",
    "    \n",
    "import gzip\n",
    "\n",
    "with gzip.open(\"mycorrections.json.gz\", \"wt\") as fout:\n",
    "    fout.write(cset.json(exclude_unset=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fb88c12",
   "metadata": {},
   "source": [
    "## Command-line utility\n",
    "\n",
    "The `correction` utility, bundled with the library, provides useful tools for viewing, combining, and validating correction json sets. It also can provide the necessary compile flags for C++ programs to use correctionlib:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9765cb34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "usage: correction [-h] [--width WIDTH] [--html HTML]\r\n",
      "                  {validate,summary,merge,config} ...\r\n",
      "\r\n",
      "Command-line interface to correctionlib\r\n",
      "\r\n",
      "positional arguments:\r\n",
      "  {validate,summary,merge,config}\r\n",
      "    validate            Check if all files are valid\r\n",
      "    summary             Print a summmary of the corrections\r\n",
      "    merge               Merge one or more correction files and print to stdout\r\n",
      "    config              Configuration and linking information\r\n",
      "\r\n",
      "options:\r\n",
      "  -h, --help            show this help message and exit\r\n",
      "  --width WIDTH         Rich output width\r\n",
      "  --html HTML           Save terminal output to an HTML file\r\n"
     ]
    }
   ],
   "source": [
    "!correction --help"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3a8458d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "usage: correction config [-h] [-v] [--incdir] [--cflags] [--libdir]\r\n",
      "                         [--ldflags] [--rpath] [--cmake]\r\n",
      "\r\n",
      "options:\r\n",
      "  -h, --help     show this help message and exit\r\n",
      "  -v, --version\r\n",
      "  --incdir\r\n",
      "  --cflags\r\n",
      "  --libdir\r\n",
      "  --ldflags\r\n",
      "  --rpath        Include library path hint in linker\r\n",
      "  --cmake        CMake dependency flags\r\n"
     ]
    }
   ],
   "source": [
    "!correction config -h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b0e5ee3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting main.cc\n"
     ]
    }
   ],
   "source": [
    "%%file main.cc\n",
    "#include <iostream>\n",
    "#include \"correction.h\"\n",
    "\n",
    "int main() {\n",
    "    auto cset = correction::CorrectionSet::from_file(\"mycorrections.json.gz\");\n",
    "    \n",
    "    double val = cset->at(\"ptweight\")->evaluate({15.0, \"nominal\"});\n",
    "    std::cout << val << std::endl;\n",
    "    return 0;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0bd8a625",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ld: warning: dylib (/usr/local/lib/python3.10/site-packages/correctionlib/lib/libcorrectionlib.dylib) was built for newer macOS version (12.0) than being linked (11.0)\r\n"
     ]
    }
   ],
   "source": [
    "!g++ main.cc -o main $(correction config --cflags --ldflags --rpath)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b9251f4",
   "metadata": {},
   "source": [
    "On some platforms, if you see errors such as\n",
    "```\n",
    "main.cc:(.text+0x17d): undefined reference to `correction::CorrectionSet::from_file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)'\n",
    "```\n",
    "in the above compilation, you may need to add `-D_GLIBCXX_USE_CXX11_ABI=0` to the arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b083d0d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1\r\n"
     ]
    }
   ],
   "source": [
    "!./main"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
